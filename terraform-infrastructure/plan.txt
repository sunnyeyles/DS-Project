[0m[1mvar.certificate_arn[0m
  The ARN of the ACM certificate for HTTPS

  [1mEnter a value:[0m [0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # module.alb.aws_lb.app_alb[0m will be created
[0m  [32m+[0m[0m resource "aws_lb" "app_alb" {
      [32m+[0m[0m arn                                                          = (known after apply)
      [32m+[0m[0m arn_suffix                                                   = (known after apply)
      [32m+[0m[0m client_keep_alive                                            = 3600
      [32m+[0m[0m desync_mitigation_mode                                       = "defensive"
      [32m+[0m[0m dns_name                                                     = (known after apply)
      [32m+[0m[0m drop_invalid_header_fields                                   = false
      [32m+[0m[0m enable_deletion_protection                                   = false
      [32m+[0m[0m enable_http2                                                 = true
      [32m+[0m[0m enable_tls_version_and_cipher_suite_headers                  = false
      [32m+[0m[0m enable_waf_fail_open                                         = false
      [32m+[0m[0m enable_xff_client_port                                       = false
      [32m+[0m[0m enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      [32m+[0m[0m id                                                           = (known after apply)
      [32m+[0m[0m idle_timeout                                                 = 60
      [32m+[0m[0m internal                                                     = false
      [32m+[0m[0m ip_address_type                                              = (known after apply)
      [32m+[0m[0m load_balancer_type                                           = "application"
      [32m+[0m[0m name                                                         = "appALB"
      [32m+[0m[0m name_prefix                                                  = (known after apply)
      [32m+[0m[0m preserve_host_header                                         = false
      [32m+[0m[0m security_groups                                              = (known after apply)
      [32m+[0m[0m subnets                                                      = (known after apply)
      [32m+[0m[0m tags                                                         = {
          [32m+[0m[0m "Name" = "appALB"
        }
      [32m+[0m[0m tags_all                                                     = {
          [32m+[0m[0m "Name" = "appALB"
        }
      [32m+[0m[0m vpc_id                                                       = (known after apply)
      [32m+[0m[0m xff_header_processing_mode                                   = "append"
      [32m+[0m[0m zone_id                                                      = (known after apply)
    }

[1m  # module.alb.aws_lb_listener.http[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_listener" "http" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m load_balancer_arn = (known after apply)
      [32m+[0m[0m port              = 80
      [32m+[0m[0m protocol          = "HTTP"
      [32m+[0m[0m ssl_policy        = (known after apply)
      [32m+[0m[0m tags_all          = (known after apply)

      [32m+[0m[0m default_action {
          [32m+[0m[0m order = (known after apply)
          [32m+[0m[0m type  = "redirect"

          [32m+[0m[0m redirect {
              [32m+[0m[0m host        = "#{host}"
              [32m+[0m[0m path        = "/#{path}"
              [32m+[0m[0m port        = "443"
              [32m+[0m[0m protocol    = "HTTPS"
              [32m+[0m[0m query       = "#{query}"
              [32m+[0m[0m status_code = "HTTP_301"
            }
        }
    }

[1m  # module.alb.aws_lb_listener.https[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_listener" "https" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m load_balancer_arn = (known after apply)
      [32m+[0m[0m port              = 443
      [32m+[0m[0m protocol          = "HTTPS"
      [32m+[0m[0m ssl_policy        = "ELBSecurityPolicy-2016-08"
      [32m+[0m[0m tags_all          = (known after apply)
        [90m# (1 unchanged attribute hidden)[0m[0m

      [32m+[0m[0m default_action {
          [32m+[0m[0m order            = (known after apply)
          [32m+[0m[0m target_group_arn = (known after apply)
          [32m+[0m[0m type             = "forward"
        }
    }

[1m  # module.alb.aws_lb_target_group.frontend_target_group[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_target_group" "frontend_target_group" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m arn_suffix                         = (known after apply)
      [32m+[0m[0m connection_termination             = (known after apply)
      [32m+[0m[0m deregistration_delay               = "300"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m ip_address_type                    = (known after apply)
      [32m+[0m[0m lambda_multi_value_headers_enabled = false
      [32m+[0m[0m load_balancer_arns                 = (known after apply)
      [32m+[0m[0m load_balancing_algorithm_type      = (known after apply)
      [32m+[0m[0m load_balancing_anomaly_mitigation  = (known after apply)
      [32m+[0m[0m load_balancing_cross_zone_enabled  = (known after apply)
      [32m+[0m[0m name                               = "frontendTargetGroup"
      [32m+[0m[0m name_prefix                        = (known after apply)
      [32m+[0m[0m port                               = 80
      [32m+[0m[0m preserve_client_ip                 = (known after apply)
      [32m+[0m[0m protocol                           = "HTTP"
      [32m+[0m[0m protocol_version                   = (known after apply)
      [32m+[0m[0m proxy_protocol_v2                  = false
      [32m+[0m[0m slow_start                         = 0
      [32m+[0m[0m tags_all                           = (known after apply)
      [32m+[0m[0m target_type                        = "instance"
      [32m+[0m[0m vpc_id                             = (known after apply)

      [32m+[0m[0m health_check {
          [32m+[0m[0m enabled             = true
          [32m+[0m[0m healthy_threshold   = 2
          [32m+[0m[0m interval            = 60
          [32m+[0m[0m matcher             = "200"
          [32m+[0m[0m path                = "/"
          [32m+[0m[0m port                = "traffic-port"
          [32m+[0m[0m protocol            = "HTTP"
          [32m+[0m[0m timeout             = 50
          [32m+[0m[0m unhealthy_threshold = 10
        }
    }

[1m  # module.nat_gateway.aws_eip.eip1[0m will be created
[0m  [32m+[0m[0m resource "aws_eip" "eip1" {
      [32m+[0m[0m allocation_id             = (known after apply)
      [32m+[0m[0m arn                       = (known after apply)
      [32m+[0m[0m associate_with_private_ip = (known after apply)
      [32m+[0m[0m association_id            = (known after apply)
      [32m+[0m[0m carrier_ip                = (known after apply)
      [32m+[0m[0m customer_owned_ip         = (known after apply)
      [32m+[0m[0m domain                    = (known after apply)
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m instance                  = (known after apply)
      [32m+[0m[0m network_border_group      = (known after apply)
      [32m+[0m[0m network_interface         = (known after apply)
      [32m+[0m[0m private_dns               = (known after apply)
      [32m+[0m[0m private_ip                = (known after apply)
      [32m+[0m[0m ptr_record                = (known after apply)
      [32m+[0m[0m public_dns                = (known after apply)
      [32m+[0m[0m public_ip                 = (known after apply)
      [32m+[0m[0m public_ipv4_pool          = (known after apply)
      [32m+[0m[0m tags                      = {
          [32m+[0m[0m "Name" = "ElasticIPAddress1"
        }
      [32m+[0m[0m tags_all                  = {
          [32m+[0m[0m "Name" = "ElasticIPAddress1"
        }
      [32m+[0m[0m vpc                       = (known after apply)
    }

[1m  # module.nat_gateway.aws_eip.eip2[0m will be created
[0m  [32m+[0m[0m resource "aws_eip" "eip2" {
      [32m+[0m[0m allocation_id             = (known after apply)
      [32m+[0m[0m arn                       = (known after apply)
      [32m+[0m[0m associate_with_private_ip = (known after apply)
      [32m+[0m[0m association_id            = (known after apply)
      [32m+[0m[0m carrier_ip                = (known after apply)
      [32m+[0m[0m customer_owned_ip         = (known after apply)
      [32m+[0m[0m domain                    = (known after apply)
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m instance                  = (known after apply)
      [32m+[0m[0m network_border_group      = (known after apply)
      [32m+[0m[0m network_interface         = (known after apply)
      [32m+[0m[0m private_dns               = (known after apply)
      [32m+[0m[0m private_ip                = (known after apply)
      [32m+[0m[0m ptr_record                = (known after apply)
      [32m+[0m[0m public_dns                = (known after apply)
      [32m+[0m[0m public_ip                 = (known after apply)
      [32m+[0m[0m public_ipv4_pool          = (known after apply)
      [32m+[0m[0m tags                      = {
          [32m+[0m[0m "Name" = "ElasticIPAddress2"
        }
      [32m+[0m[0m tags_all                  = {
          [32m+[0m[0m "Name" = "ElasticIPAddress2"
        }
      [32m+[0m[0m vpc                       = (known after apply)
    }

[1m  # module.nat_gateway.aws_nat_gateway.nat_gw1[0m will be created
[0m  [32m+[0m[0m resource "aws_nat_gateway" "nat_gw1" {
      [32m+[0m[0m allocation_id                      = (known after apply)
      [32m+[0m[0m association_id                     = (known after apply)
      [32m+[0m[0m connectivity_type                  = "public"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m network_interface_id               = (known after apply)
      [32m+[0m[0m private_ip                         = (known after apply)
      [32m+[0m[0m public_ip                          = (known after apply)
      [32m+[0m[0m secondary_private_ip_address_count = (known after apply)
      [32m+[0m[0m secondary_private_ip_addresses     = (known after apply)
      [32m+[0m[0m subnet_id                          = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Name" = "NATGateway1"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Name" = "NATGateway1"
        }
    }

[1m  # module.nat_gateway.aws_nat_gateway.nat_gw2[0m will be created
[0m  [32m+[0m[0m resource "aws_nat_gateway" "nat_gw2" {
      [32m+[0m[0m allocation_id                      = (known after apply)
      [32m+[0m[0m association_id                     = (known after apply)
      [32m+[0m[0m connectivity_type                  = "public"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m network_interface_id               = (known after apply)
      [32m+[0m[0m private_ip                         = (known after apply)
      [32m+[0m[0m public_ip                          = (known after apply)
      [32m+[0m[0m secondary_private_ip_address_count = (known after apply)
      [32m+[0m[0m secondary_private_ip_addresses     = (known after apply)
      [32m+[0m[0m subnet_id                          = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Name" = "NATGateway2"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Name" = "NATGateway2"
        }
    }

[1m  # module.route_tables.aws_route.private_route1[0m will be created
[0m  [32m+[0m[0m resource "aws_route" "private_route1" {
      [32m+[0m[0m destination_cidr_block = "0.0.0.0/0"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_id            = (known after apply)
      [32m+[0m[0m instance_owner_id      = (known after apply)
      [32m+[0m[0m nat_gateway_id         = (known after apply)
      [32m+[0m[0m network_interface_id   = (known after apply)
      [32m+[0m[0m origin                 = (known after apply)
      [32m+[0m[0m route_table_id         = (known after apply)
      [32m+[0m[0m state                  = (known after apply)
    }

[1m  # module.route_tables.aws_route.private_route2[0m will be created
[0m  [32m+[0m[0m resource "aws_route" "private_route2" {
      [32m+[0m[0m destination_cidr_block = "0.0.0.0/0"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_id            = (known after apply)
      [32m+[0m[0m instance_owner_id      = (known after apply)
      [32m+[0m[0m nat_gateway_id         = (known after apply)
      [32m+[0m[0m network_interface_id   = (known after apply)
      [32m+[0m[0m origin                 = (known after apply)
      [32m+[0m[0m route_table_id         = (known after apply)
      [32m+[0m[0m state                  = (known after apply)
    }

[1m  # module.route_tables.aws_route.public_route[0m will be created
[0m  [32m+[0m[0m resource "aws_route" "public_route" {
      [32m+[0m[0m destination_cidr_block = "0.0.0.0/0"
      [32m+[0m[0m gateway_id             = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_id            = (known after apply)
      [32m+[0m[0m instance_owner_id      = (known after apply)
      [32m+[0m[0m network_interface_id   = (known after apply)
      [32m+[0m[0m origin                 = (known after apply)
      [32m+[0m[0m route_table_id         = (known after apply)
      [32m+[0m[0m state                  = (known after apply)
    }

[1m  # module.route_tables.aws_route_table.private_rt1[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "private_rt1" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "PrivateRouteTableAZ1"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name" = "PrivateRouteTableAZ1"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.route_tables.aws_route_table.private_rt2[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "private_rt2" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "PrivateRouteTableAZ2"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name" = "PrivateRouteTableAZ2"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.route_tables.aws_route_table.public_rt[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "public_rt" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "PublicRouteTable"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name" = "PublicRouteTable"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.route_tables.aws_route_table_association.private_rt1_assoc1[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private_rt1_assoc1" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.route_tables.aws_route_table_association.private_rt1_assoc2[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private_rt1_assoc2" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.route_tables.aws_route_table_association.private_rt2_assoc1[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private_rt2_assoc1" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.route_tables.aws_route_table_association.private_rt2_assoc2[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private_rt2_assoc2" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.route_tables.aws_route_table_association.public_rt_assoc1[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public_rt_assoc1" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.route_tables.aws_route_table_association.public_rt_assoc2[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public_rt_assoc2" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.security_groups.aws_security_group.app_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "app_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 443
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 443
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 80
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 80
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "AppInstanceSecurityGroup"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "AppInstanceSecurityGroup"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.security_groups.aws_security_group.efs_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "efs_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = "EFSMountTargetSecurityGroup"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "EFSMountTargetSecurityGroup"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "EFSMountTargetSecurityGroup"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.security_groups.aws_security_group.frontend_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "frontend_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 443
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 443
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 80
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 80
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m name                   = "FrontendSecurityGroup"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "FrontendSecurityGroup"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "FrontendSecurityGroup"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.security_groups.aws_security_group.rds_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "rds_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "10.0.0.0/16",
                ]
              [32m+[0m[0m from_port        = 3306
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 3306
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m name                   = "RDSSecurityGroup"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "RDSSecurityGroup"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "RDSSecurityGroup"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.security_groups.aws_security_group_rule.efs_ingress[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "efs_ingress" {
      [32m+[0m[0m from_port                = 2049
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 2049
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.subnets.aws_network_acl.private_acl[0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl" "private_acl" {
      [32m+[0m[0m arn        = (known after apply)
      [32m+[0m[0m egress     = [
          [32m+[0m[0m {
              [32m+[0m[0m action          = "allow"
              [32m+[0m[0m cidr_block      = "0.0.0.0/0"
              [32m+[0m[0m from_port       = 0
              [32m+[0m[0m protocol        = "tcp"
              [32m+[0m[0m rule_no         = 100
              [32m+[0m[0m to_port         = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m ingress    = [
          [32m+[0m[0m {
              [32m+[0m[0m action          = "allow"
              [32m+[0m[0m cidr_block      = "10.0.0.0/16"
              [32m+[0m[0m from_port       = 0
              [32m+[0m[0m protocol        = "tcp"
              [32m+[0m[0m rule_no         = 100
              [32m+[0m[0m to_port         = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m owner_id   = (known after apply)
      [32m+[0m[0m subnet_ids = (known after apply)
      [32m+[0m[0m tags       = {
          [32m+[0m[0m "Name" = "PrivateNetworkACL"
        }
      [32m+[0m[0m tags_all   = {
          [32m+[0m[0m "Name" = "PrivateNetworkACL"
        }
      [32m+[0m[0m vpc_id     = (known after apply)
    }

[1m  # module.subnets.aws_network_acl.public_acl[0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl" "public_acl" {
      [32m+[0m[0m arn        = (known after apply)
      [32m+[0m[0m egress     = [
          [32m+[0m[0m {
              [32m+[0m[0m action          = "allow"
              [32m+[0m[0m cidr_block      = "0.0.0.0/0"
              [32m+[0m[0m from_port       = 0
              [32m+[0m[0m protocol        = "tcp"
              [32m+[0m[0m rule_no         = 100
              [32m+[0m[0m to_port         = 65535
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m ingress    = [
          [32m+[0m[0m {
              [32m+[0m[0m action          = "allow"
              [32m+[0m[0m cidr_block      = "0.0.0.0/0"
              [32m+[0m[0m from_port       = 443
              [32m+[0m[0m protocol        = "tcp"
              [32m+[0m[0m rule_no         = 110
              [32m+[0m[0m to_port         = 443
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
          [32m+[0m[0m {
              [32m+[0m[0m action          = "allow"
              [32m+[0m[0m cidr_block      = "0.0.0.0/0"
              [32m+[0m[0m from_port       = 80
              [32m+[0m[0m protocol        = "tcp"
              [32m+[0m[0m rule_no         = 100
              [32m+[0m[0m to_port         = 80
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m owner_id   = (known after apply)
      [32m+[0m[0m subnet_ids = (known after apply)
      [32m+[0m[0m tags       = {
          [32m+[0m[0m "Name" = "PublicNetworkACL"
        }
      [32m+[0m[0m tags_all   = {
          [32m+[0m[0m "Name" = "PublicNetworkACL"
        }
      [32m+[0m[0m vpc_id     = (known after apply)
    }

[1m  # module.subnets.aws_network_acl_association.private_acl_app_subnet1[0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_association" "private_acl_app_subnet1" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.subnets.aws_network_acl_association.private_acl_app_subnet2[0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_association" "private_acl_app_subnet2" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.subnets.aws_network_acl_association.private_acl_db_subnet1[0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_association" "private_acl_db_subnet1" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.subnets.aws_network_acl_association.private_acl_db_subnet2[0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_association" "private_acl_db_subnet2" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.subnets.aws_network_acl_association.public_acl_assoc[0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_association" "public_acl_assoc" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.subnets.aws_network_acl_association.public_acl_assoc_2[0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_association" "public_acl_assoc_2" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.subnets.aws_network_acl_rule.private_egress[0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "private_egress" {
      [32m+[0m[0m cidr_block     = "0.0.0.0/0"
      [32m+[0m[0m egress         = true
      [32m+[0m[0m from_port      = 0
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m protocol       = "tcp"
      [32m+[0m[0m rule_action    = "allow"
      [32m+[0m[0m rule_number    = 200
      [32m+[0m[0m to_port        = 0
    }

[1m  # module.subnets.aws_network_acl_rule.private_ingress[0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "private_ingress" {
      [32m+[0m[0m cidr_block     = "10.0.0.0/16"
      [32m+[0m[0m egress         = false
      [32m+[0m[0m from_port      = 0
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m protocol       = "tcp"
      [32m+[0m[0m rule_action    = "allow"
      [32m+[0m[0m rule_number    = 200
      [32m+[0m[0m to_port        = 0
    }

[1m  # module.subnets.aws_network_acl_rule.public_egress[0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "public_egress" {
      [32m+[0m[0m cidr_block     = "0.0.0.0/0"
      [32m+[0m[0m egress         = true
      [32m+[0m[0m from_port      = 1024
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m protocol       = "tcp"
      [32m+[0m[0m rule_action    = "allow"
      [32m+[0m[0m rule_number    = 200
      [32m+[0m[0m to_port        = 65535
    }

[1m  # module.subnets.aws_network_acl_rule.public_ingress[0m will be created
[0m  [32m+[0m[0m resource "aws_network_acl_rule" "public_ingress" {
      [32m+[0m[0m cidr_block     = "0.0.0.0/0"
      [32m+[0m[0m egress         = false
      [32m+[0m[0m from_port      = 1024
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m network_acl_id = (known after apply)
      [32m+[0m[0m protocol       = "tcp"
      [32m+[0m[0m rule_action    = "allow"
      [32m+[0m[0m rule_number    = 200
      [32m+[0m[0m to_port        = 65535
    }

[1m  # module.subnets.aws_subnet.app_subnet1[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "app_subnet1" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "eu-west-3a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.2.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "AppSubnet1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "AppSubnet1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.subnets.aws_subnet.app_subnet2[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "app_subnet2" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "eu-west-3b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.3.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "AppSubnet2"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "AppSubnet2"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.subnets.aws_subnet.db_subnet1[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "db_subnet1" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "eu-west-3a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.4.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "DatabaseSubnet1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "DatabaseSubnet1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.subnets.aws_subnet.db_subnet2[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "db_subnet2" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "eu-west-3b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.5.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "DatabaseSubnet2"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "DatabaseSubnet2"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.subnets.aws_subnet.public_subnet1[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public_subnet1" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "eu-west-3a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.0.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "PublicSubnet1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "PublicSubnet1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.subnets.aws_subnet.public_subnet2[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public_subnet2" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "eu-west-3b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.1.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "PublicSubnet2"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "PublicSubnet2"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_internet_gateway.project_igw[0m will be created
[0m  [32m+[0m[0m resource "aws_internet_gateway" "project_igw" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m owner_id = (known after apply)
      [32m+[0m[0m tags     = {
          [32m+[0m[0m "Name" = "ProjectInternetGateway"
        }
      [32m+[0m[0m tags_all = {
          [32m+[0m[0m "Name" = "ProjectInternetGateway"
        }
      [32m+[0m[0m vpc_id   = (known after apply)
    }

[1m  # module.vpc.aws_vpc.project_vpc[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "project_vpc" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = true
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "ProjectVPC"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "ProjectVPC"
        }
    }

[1mPlan:[0m 45 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m alb_arn           = (known after apply)
  [32m+[0m[0m alb_dns_name      = (known after apply)
  [32m+[0m[0m alb_id            = (known after apply)
  [32m+[0m[0m alb_sg_id         = (known after apply)
  [32m+[0m[0m app_sg_id         = (known after apply)
  [32m+[0m[0m app_subnet1_id    = (known after apply)
  [32m+[0m[0m app_subnet2_id    = (known after apply)
  [32m+[0m[0m db_subnet1_id     = (known after apply)
  [32m+[0m[0m db_subnet2_id     = (known after apply)
  [32m+[0m[0m efs_sg_id         = (known after apply)
  [32m+[0m[0m nat_gw1_id        = (known after apply)
  [32m+[0m[0m nat_gw2_id        = (known after apply)
  [32m+[0m[0m public_subnet1_id = (known after apply)
  [32m+[0m[0m public_subnet2_id = (known after apply)
  [32m+[0m[0m rds_sg_id         = (known after apply)
  [32m+[0m[0m target_group_arn  = (known after apply)
  [32m+[0m[0m vpc_id            = (known after apply)
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
